name: Build ImmortalWrt Firmware for RK3568 R5S

on:
  push:
    branches:
      - main  # 当 main 分支有推送时触发
  # 也可以手动触发工作流
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04  # 使用 Ubuntu 22.04 作为构建环境

    steps:
      - name: Checkout code
        uses: actions/checkout@v3  # 检出代码

      - name: Set up environment
        run: |
          sudo apt update -y
          sudo apt full-upgrade -y
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
            bzip2 ccache clang cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
            g++-multilib git gnutls-bin help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev \
            libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev \
            libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 \
            python3 python3-distutils python3-pip python3-setuptools python3-wheel rsync subversion swig \
            texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev

      - name: Initialize build environment
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Create custom .config
        run: |
          cat << EOF > .config
# 基础配置
CONFIG_TARGET_rockchip=y
CONFIG_TARGET_rockchip_armv8=y
CONFIG_TARGET_rockchip_armv8_DEVICE_nanopi-r5s=y

# 你可以在此处添加其他自定义配置
# 例如，启用一些额外的软件包
# CONFIG_PACKAGE_luci=y
# CONFIG_PACKAGE_openssh-server=y

EOF

      - name: Configure build
        run: |
          make defconfig  # 使用默认配置
          make menuconfig -n # 可以选择以非交互方式配置，但主要配置依赖上面的 .config
          make oldconfig  # 根据 .config 更新配置

      - name: Build firmware
        run: |
          make -j$(nproc) V=s  # 使用多线程进行构建

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: immortalwrt-rk3568-r5s-firmware
          path: bin/targets/*/*/*.bin  # 上传生成的固件文件
