name: Build OpenWrt Firmware

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Target platform'
        required: true
        type: choice
        options:
          - ramips
          - mediatek
          - x86
          - bcm27xx
          - ipq40xx
          - ipq806x
          - rockchip
      subtarget:
        description: 'Subtarget/Chip'
        required: true
        type: choice
        options:
          - mt7621
          - mt7620
          - x86_64
          - bcm2710
          - bcm2711
          - ipq40xx
          - ipq806x
          - rk3328
          - rk3399
      device:
        description: 'Device name (e.g. xiaomi_mir3g)'
        required: true
        type: choice
        options:
          - xiaomi_mir3g
          - netgear_r6220
          - glinet_gl-ar750
          - friendlyarm_nanopi-r2s
          - raspberrypi_4
          - x86_64
      custom_config:
        description: 'Custom .config URL (optional)'
        required: false
        default: ''
      custom_packages:
        description: 'Extra packages (space-separated)'
        required: false
        default: 'luci luci-ssl luci-app-ttyd'

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
      - name: Checkout OpenWrt
        uses: actions/checkout@v4
        with:
          repository: openwrt/openwrt
          ref: master

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential ccache ecj fastjar file g++ gawk gettext git libncurses5-dev libssl-dev \
            python2.7 python3 unzip wget zlib1g-dev rsync subversion swig time qemu-utils

      - name: Update & install feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load custom config if provided
        if: ${{ github.event.inputs.custom_config != '' }}
        run: |
          curl -fsSL "${{ github.event.inputs.custom_config }}" -o .config

      - name: Generate default config
        if: ${{ github.event.inputs.custom_config == '' }}
        run: |
          echo "CONFIG_TARGET_${{ github.event.inputs.target }}=y" >> .config
          echo "CONFIG_TARGET_${{ github.event.inputs.target }}_${{ github.event.inputs.subtarget }}=y" >> .config
          echo "CONFIG_TARGET_${{ github.event.inputs.target }}_${{ github.event.inputs.subtarget }}_DEVICE_${{ github.event.inputs.device }}=y" >> .config

      - name: Add extra packages
        if: ${{ github.event.inputs.custom_packages != '' }}
        run: |
          for pkg in ${{ github.event.inputs.custom_packages }}; do
            echo "CONFIG_PACKAGE_$pkg=y" >> .config
          done

      - name: Download sources
        run: |
          make defconfig
          make download -j$(nproc)
          find dl -size -1024c -exec rm -f {} \;

      - name: Build firmware
        run: |
          make -j$(nproc) || make -j1 V=s

      - name: Package firmware
        run: |
          mkdir -p output
          cp -r bin/targets/*/* output/
          cd output && zip -r ../firmware.zip . && cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ github.event.inputs.device }}
          path: firmware.zip

      - name: Create tag
        id: tag
        run: echo "TAG_NAME=OpenWrt-$(date +%Y%m%d)-${{ github.event.inputs.device }}" >> $GITHUB_ENV

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.TAG_NAME }}
          draft: false
          prerelease: false

      - name: Upload firmware to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: firmware.zip
          asset_name: OpenWrt-${{ github.event.inputs.device }}.zip
          asset_content_type: application/zip
